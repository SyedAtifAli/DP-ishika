Merge Sort Analysis:
Time Complexity:
Best Case:θ(nLogn) 
Average Case:θ(nLogn) 
Worst Caseθ(nLogn) 

Space Complexity:O(n)

Algorithmic Paradigm: Divide and Conquer
Sorting In Place: No in a typical implementation
Stable: Yes


Quick Sort Analysis:
Time Complexity:
Best Case: n(logn) always middle element is chosen as pivot
Average Case: n(log(n))
Worst Case: O(n*n)

Space Complexity:
Algorithmic Paradigm: Divide and Conquer
Sorting In Place: yes
Stable: no


consider an array: 1 2 3 4 5(fully sorted)
merge Sort: θ(nLogn) , O(n)
Quick Sort: o(n*n) worst case(already sorted array)


So, which one is better and why?
Quick Sort in its general form is an in-place sort (i.e. it doesn’t require any extra storage) whereas merge sort requires O(N) extra storage, 
N denoting the array size which may be quite expensive. Allocating and de-allocating the extra space used for merge sort increases the running time of 
the algorithm. Comparing average
complexity we find that both type of sorts have O(NlogN) average complexity but the constants differ. For arrays, merge sort loses due to the use of extra 
O(N) storage space.
